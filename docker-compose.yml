version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    tty: true 
    container_name: go_backend
    ports:
      - "8080:8080"
    # volumes:
    #   - ./backend:/app
    depends_on:
      - postgres
    networks:
      - app-network
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=discord
      - SECRET_KEY=VERY_SECRET_NO_ONE_WILL_KNOW
      - CORS_ALLOWED_ORIGINS=http://react_frontend:3000
    entrypoint: ["./wait-for-postgres.sh", "./main"]

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: react_frontend
    ports:
      - "3000:3000"
    # volumes:
    #   - ./frontend:/app
    networks:
      - app-network
    environment:
      - PORT=3000
      - NODE_ENV=production
      - UPLOADTHING_SECRET=
      - UPLOADTHING_APP_ID=
      - NEXT_PUBLIC_SOCKET_URL=ws://go_backend:8080/ws
      - NEXT_PUBLIC_BACKEND_URL=http://go_backend:8080

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: discord
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network
  
  coturn:
    image: coturn/coturn
    container_name: coturn
    ports:
      - "3478:3478/udp"  # STUN/TURN UDP port
      - "3478:3478/tcp"  # STUN/TURN TCP port
      - "5349:5349/tcp"  # Optional: TURN over TLS
    networks:
      - app-network
    environment:
      - DETECT_EXTERNAL_IP=yes
      - DETECT_RELAY_IP=yes
    volumes:
      - coturn-data:/var/lib/turn

volumes:
  pgdata:
  coturn-data:  # Volume for coturn data

networks:
  app-network:
    driver: bridge